Flake8:
    script:
    - curl -L -O -k https://gitlab.tiker.net/inducer/ci-support/raw/master/prepare-and-run-flake8.sh
    - ". ./prepare-and-run-flake8.sh volumential test examples benchmarks"
    tags:
    - python3
    except:
    - tags

Python 3 POCL:
  script:
  - export PY_EXE=python3
  - export PYOPENCL_TEST=portable:pthread
  - export HDF5_USE_FILE_LOCKING=FALSE
  - export EXTRA_INSTALL="pybind11 cython numpy pytest pytest-cov scipy mako wheel"
  - export PYTEST_FLAGS="--cov=volumential"
  - git submodule sync && git submodule update --init --recursive --remote
  - ((cd contrib/meshgen11_dealii/; ./build.sh) && echo "Using meshgen11_dealii.") || (echo "Using boxtree for meshgen.")
  - curl -L -O -k https://gitlab.tiker.net/inducer/ci-support/raw/master/build-and-test-py-project.sh
  - sed -i -e '/^TESTABLES=.*/i PIP="${PY_EXE} $(which pip)" \n$PIP uninstall -y pytest-warnings' build-and-test-py-project.sh
  - ". ./build-and-test-py-project.sh"
  tags:
  - python3
  - pocl
  - dealii
  except:
  - tags
  artifacts:
    reports:
      junit: test/pytest.xml

Python 3 Intel:
  script:
  - export PY_EXE=python3
  - source /opt/enable-intel-cl.sh
  - export PYOPENCL_TEST="intel(r):pu"
  - export HDF5_USE_FILE_LOCKING=FALSE
  - export PYTEST_FLAGS="--cov=volumential"
  - export EXTRA_INSTALL="pybind11 cython numpy pytest pytest-cov scipy mako wheel"
  - git submodule sync && git submodule update --init --recursive --remote
  - ((cd contrib/meshgen11_dealii/; ./build.sh) && echo "Using meshgen11_dealii.") || (echo "Using boxtree for meshgen.")
  - curl -L -O -k https://gitlab.tiker.net/inducer/ci-support/raw/master/build-and-test-py-project.sh
  - sed -i -e '/^TESTABLES=.*/i PIP="${PY_EXE} $(which pip)" \n$PIP uninstall -y pytest-warnings' build-and-test-py-project.sh
  - ". ./build-and-test-py-project.sh"
  tags:
  - python3
  - intel-cl-cpu
  - dealii
  except:
  - tags
  artifacts:
    reports:
      junit: test/pytest.xml

Python 3 Conda:
  script:
  - export SUMPY_FORCE_SYMBOLIC_BACKEND=symengine
  - export CONDA_ENVIRONMENT=.test-conda-env-py3.yml
  - export HDF5_USE_FILE_LOCKING=FALSE
  - export PYTEST_FLAGS="--cov=volumential"
  - curl -L -O -k https://gitlab.tiker.net/inducer/ci-support/raw/master/build-and-test-py-project-within-miniconda.sh
  - ". ./build-and-test-py-project-within-miniconda.sh"
  tags:
  - linux
  - large-node
  except:
  - tags
  artifacts:
    reports:
      junit: test/pytest.xml

Python 3 Conda Apple:
  script:
  - export LC_ALL=en_US.UTF-8
  - export LANG=en_US.UTF-8
  - export CONDA_ENVIRONMENT=.test-conda-env-py3-macos.yml
  - export HDF5_USE_FILE_LOCKING=FALSE
  - export CC=clang
  - export PYTEST_FLAGS="--cov=volumential"
  - set -o xtrace
  - curl -L -O -k https://gitlab.tiker.net/inducer/ci-support/raw/master/build-and-test-py-project-within-miniconda.sh
  - ". ./build-and-test-py-project-within-miniconda.sh"
  tags:
  - apple
  except:
  - tags
  artifacts:
    reports:
      junit: test/pytest.xml

Python 3 POCL Examples:
  script:
  - test -n "$SKIP_EXAMPLES" && exit
  - export PY_EXE=python3
  - export PYOPENCL_TEST=portable:pthread
  - export EXTRA_INSTALL="pybind11 cython numpy pytest scipy mako wheel"
  - rm -f examples/*.hdf5
  - git submodule sync && git submodule update --init --recursive --remote
  - ((cd contrib/meshgen11_dealii/; ./build.sh) && echo "Using meshgen11_dealii.") || (echo "Using boxtree for meshgen.")
  - curl -L -O -k https://gitlab.tiker.net/inducer/ci-support/raw/master/build-py-project-and-run-examples.sh
  - ". ./build-py-project-and-run-examples.sh"
  tags:
  - python3
  - pocl
  - large-node
  except:
  - tags
  artifacts:
    reports:
      junit: test/pytest.xml

Documentation Sphinx:
  script:
  - export PY_EXE=python3
  - export PYOPENCL_TEST=portable:pthread
  - export EXTRA_INSTALL="pybind11 cython numpy pytest scipy mako wheel"
  - git submodule sync && git submodule update --init --recursive --remote
  - ((cd contrib/meshgen11_dealii/; ./build.sh) && echo "Using meshgen11_dealii.") || (echo "Using boxtree for meshgen.")
  - curl -L -O -k https://gitlab.tiker.net/inducer/ci-support/raw/master/build-py-project.sh
  - ". ./build-py-project.sh"
  - cd doc && make html
  - git config --global user.name "${COMMIT_USER}"
  - git config --global user.email "${COMMIT_EMAIL}"
  - git clone https://${GH_USER}:${GH_ACCESS_TOKEN}@${HOMEPAGE_URL} homepage
  - cd homepage
  - git checkout src
  - cd static && mkdir -p docs
  - rm -rf docs/volumential
  - cp -r ../../build/html docs/volumential
  - git add -f ./docs/volumential
  - (git commit -m "Auto-updated volumential docs") || (echo "Docs are up to date")
  - git push
  tags:
  - python3
  except:
  - tags
  allow_failure: true

Docker Image w/t Firedrake:
  script:
  - docker info
  - docker pull firedrakeproject/firedrake:latest
  - docker build --no-cache -t xywei/volumential-firedrake:latest -f docker/Dockerfile.firedrake .
  - docker build --no-cache -t xywei/volumential-firedrake-jupyterlab:latest -f docker/Dockerfile.firedrake_jupyterlab .
  - docker build --no-cache -t xywei/volumential-firedrake-jupyterlab-vim:latest -f docker/Dockerfile.firedrake_jupyterlab_vim .
  - bash -c 'if [ "$BRANCH_PROTECTED" = 1 ]; then exit 0; else exit 1; fi'
  - docker login --username "${DOCKERHUB_USERNAME}" --password "${DOCKERHUB_ACCESS_TOKEN}"
  - docker push xywei/volumential-firedrake:latest
  - docker push xywei/volumential-firedrake-jupyterlab:latest
  - docker push xywei/volumential-firedrake-jupyterlab-vim:latest
  tags:
  - docker
  except:
  - tags
  allow_failure: true
